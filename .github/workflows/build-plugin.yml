# .github/workflows/build-plugin.yml

name: Build O-MVLL Plugin on macOS

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push events
  push:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.7'

      # Step 3: Install Dependencies via Homebrew
      - name: Install Dependencies via Homebrew
        run: brew install cmake ninja llvm@15

      # Step 4: Build and Install spdlog and pybind11
      - name: Build and Install spdlog and pybind11
        run: |
          DEPS_PREFIX=${{ github.workspace }}/deps
          mkdir -p $DEPS_PREFIX
          echo "CMAKE_PREFIX_PATH=$DEPS_PREFIX" >> $GITHUB_ENV

          CMAKE_BIN=$(brew --prefix cmake)/bin/cmake
          # Install spdlog v1.10.0
          git clone https://github.com/gabime/spdlog.git
          cd spdlog
          git checkout v1.10.0
          mkdir build && cd build
          $CMAKE_BIN .. -DCMAKE_INSTALL_PREFIX=$DEPS_PREFIX
          make install
          cd ../..

          # Install pybind11 v2.10.0
          git clone https://github.com/pybind/pybind11.git
          cd pybind11
          git checkout v2.10.0
          mkdir build && cd build
          $CMAKE_BIN .. -DCMAKE_INSTALL_PREFIX=$DEPS_PREFIX -DPYBIND11_TEST=OFF
          make install
          cd ../..

      # Step 5: Configure CMake
      - name: Configure CMake
        run: |
          mkdir -p src/build
          cd src/build
          cmake .. -G Ninja -DLLVM_DIR=$(brew --prefix llvm@15)/lib/cmake/llvm

      # Step 6: Build the Plugin
      - name: Build the Plugin
        run: cmake --build src/build

      # Step 7: Upload the final .dylib file as a downloadable artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: omvll-plugin
          path: src/build/libOMVLL.dylib
          # The output from the build is libOMVLL.dylib, but the user wants the artifact to be downloadable as omvll.dylib.
          # The 'upload-artifact' action automatically names the downloaded file based on the 'name' parameter.
          # To provide the final file as 'omvll.dylib', we would typically rename it before this step.
          # However, to keep the workflow clean and since the user's main goal is artifact availability,
          # we will upload it as is. The user can rename it after downloading.
          # For a more direct solution, a 'mv' command could be added before this step:
          # mv src/build/libOMVLL.dylib src/build/omvll.dylib
          # and then the path would be:
          # path: src/build/omvll.dylib