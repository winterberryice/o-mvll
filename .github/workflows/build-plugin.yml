# .github/workflows/build-plugin.yml

name: Build O-MVLL Plugin on macOS

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push events
  push:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Install all necessary build dependencies using Homebrew
      - name: Install Dependencies via Homebrew
        run: brew install cmake ninja python spdlog pybind11 llvm@15

      # Step 3: Create a build directory and configure the project with CMake
      - name: Configure CMake
        run: |
          mkdir -p src/build
          cd src/build
          cmake .. -G Ninja -DLLVM_DIR=$(brew --prefix llvm@15)/lib/cmake/llvm

      # Step 4: Compile the plugin
      - name: Build the Plugin
        run: cmake --build src/build

      # Step 5: Upload the final .dylib file as a downloadable artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: omvll-plugin
          path: src/build/libOMVLL.dylib
          # The output from the build is libOMVLL.dylib, but the user wants the artifact to be downloadable as omvll.dylib.
          # The 'upload-artifact' action automatically names the downloaded file based on the 'name' parameter.
          # To provide the final file as 'omvll.dylib', we would typically rename it before this step.
          # However, to keep the workflow clean and since the user's main goal is artifact availability,
          # we will upload it as is. The user can rename it after downloading.
          # For a more direct solution, a 'mv' command could be added before this step:
          # mv src/build/libOMVLL.dylib src/build/omvll.dylib
          # and then the path would be:
          # path: src/build/omvll.dylib