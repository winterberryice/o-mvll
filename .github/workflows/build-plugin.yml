# .github/workflows/build-plugin.yml

name: Build O-MVLL Plugin on macOS

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push events
  push:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Install all necessary x86_64 build dependencies using Homebrew
      - name: Install x86_64 Dependencies via Homebrew
        run: arch -x86_64 brew install cmake ninja spdlog pybind11 llvm@15

      - name: Set up Python 3.10.7 for x86_64
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.7'
          architecture: 'x64'

      # Step 3: Create a build directory and configure the project with CMake for x86_64
      - name: Configure CMake for x86_64
        run: |
          mkdir -p src/build
          cd src/build
          arch -x86_64 cmake .. -G Ninja -DOMVLL_TARGET_ARCHS=x86_64 -DLLVM_DIR=$(arch -x86_64 brew --prefix llvm@15)/lib/cmake/llvm

      # Step 4: Compile the plugin for x86_64
      - name: Build the Plugin for x86_64
        run: arch -x86_64 cmake --build src/build

      # Step 5: Upload the final .dylib file as a downloadable artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: omvll-plugin-x86_64
          path: src/build/libOMVLL.dylib