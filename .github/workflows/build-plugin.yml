# .github/workflows/build-plugin.yml

name: Build O-MVLL Plugin on macOS

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  # Triggers the workflow on push events
  push:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-latest

    steps:
      # Step 1: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Setup Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.7'

      # Step 3: Install dependencies
      - name: Install Dependencies via Homebrew
        run: brew install cmake ninja llvm@15

      # Step 4: Setup VCPKG
      - name: Setup VCPKG
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ runner.temp }}/vcpkg'
          vcpkgGitCommitId: '985834149e9953ce69689574574719DA55516b60'

      - name: Install dependencies with vcpkg
        run: |
          vcpkg install spdlog@1.10.0
          vcpkg install pybind11@2.10.0

      # Step 5: Create a build directory and configure the project with CMake
      - name: Configure CMake
        run: |
          mkdir -p src/build
          cd src/build
          cmake .. -G Ninja \
                   -DLLVM_DIR=$(brew --prefix llvm@15)/lib/cmake/llvm \
                   -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake

      # Step 6: Compile the plugin
      - name: Build the Plugin
        run: cmake --build src/build

      # Step 7: Upload the final .dylib file as a downloadable artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: omvll-plugin
          path: src/build/libOMVLL.dylib